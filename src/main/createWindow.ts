import { BrowserWindow } from "electron";
import { getWindowInitData, saveWindowInitData } from "~/main/windowInitData";

const IS_DEV = process.env.NODE_ENV !== "production";

// Comment from Electron Forge:
//
//      This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
//      plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
//      whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const getNWindows = () => BrowserWindow.getAllWindows().length;

export const createElectronWindow = (): void => {
	const initData = getWindowInitData();

	let bounds: Partial<Electron.Rectangle> = { width: 800, height: 600 };

	if (getNWindows() === 0 && initData) {
		bounds = initData.bounds;
	}

	const win = new BrowserWindow({
		...bounds,

		// Hidden allows us to customize the title bar. Inset pushes the "traffic light" buttons
		// in allowing them to breathe a bit more.
		titleBarStyle: "hiddenInset",

		webPreferences: {
			preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
		},

		// Used while the app is loading. Not setting this makes the window flash a white background.
		backgroundColor: "#222222",
	});

	// Load the index.html
	win.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

	if (IS_DEV) {
		// Open dev tools immediately. Saves clicks.
		win.webContents.openDevTools();
	}

	win.on("close", () => {
		if (getNWindows() === 1) {
			// Closing the last window. Save the init data.
			saveWindowInitData(win);
		}
	});
};
