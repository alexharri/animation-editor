{"version":3,"sources":["webpack:///./index.ts","webpack:///external \"electron\"","webpack:///external \"fs\"","webpack:///external \"path\"","webpack:///webpack/bootstrap","webpack:///webpack/startup"],"names":[],"mappings":";;;;;;;;;;;AAAA,uDAAuD;;;;;AAEvD,mEAA8C;AAC9C,kEAAoB;AACpB,wEAAwB;AAExB,IAAI,UAAyB,CAAC;AAE9B,SAAS,YAAY;IACpB,MAAM,QAAQ,GAAG,cAAI,CAAC,IAAI,CAAC,cAAG,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,WAAW,CAAC,CAAC;IACjE,IAAI,IAAI,CAAC;IACT,IAAI;QACH,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,YAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;KACrD;IAAC,OAAO,CAAC,EAAE,GAAE;IAEd,UAAU,GAAG,IAAI,wBAAa,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;IAEhG,UAAU,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;IAEtC,UAAU,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;QAC3B,MAAM,IAAI,GAAG,EAAE,MAAM,EAAE,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC;QAChD,YAAE,CAAC,aAAa,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;AACJ,CAAC;AAED,cAAG,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE;IACzB,YAAY,EAAE,CAAC;IAEf,cAAG,CAAC,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAChC,IAAI,OAAO,CAAC,QAAQ,KAAK,QAAQ,EAAE;YAClC,cAAG,CAAC,IAAI,EAAE,CAAC;SACX;IACF,CAAC,CAAC,CAAC;IAEH,cAAG,CAAC,EAAE,CAAC,UAAU,EAAE,GAAG,EAAE;QACvB,IAAI,wBAAa,CAAC,aAAa,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;YAC/C,YAAY,EAAE,CAAC;SACf;IACF,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC;;;;;;;;;;;ACvCH,qC;;;;;;;;;;ACAA,+B;;;;;;;;;;ACAA,iC;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UCtBA;UACA;UACA;UACA","file":"index.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-var-requires */\n\nimport { app, BrowserWindow } from \"electron\";\nimport fs from \"fs\";\nimport path from \"path\";\n\nlet mainWindow: BrowserWindow;\n\nfunction createWindow() {\n\tconst initPath = path.join(app.getPath(\"userData\"), \"init.json\");\n\tlet data;\n\ttry {\n\t\tdata = JSON.parse(fs.readFileSync(initPath, \"utf8\"));\n\t} catch (e) {}\n\n\tmainWindow = new BrowserWindow(data && data.bounds ? data.bounds : { width: 800, height: 600 });\n\n\tmainWindow.loadFile(\"src/index.html\");\n\n\tmainWindow.on(\"close\", () => {\n\t\tconst data = { bounds: mainWindow.getBounds() };\n\t\tfs.writeFileSync(initPath, JSON.stringify(data));\n\t});\n}\n\napp.whenReady().then(() => {\n\tcreateWindow();\n\n\tapp.on(\"window-all-closed\", () => {\n\t\tif (process.platform !== \"darwin\") {\n\t\t\tapp.quit();\n\t\t}\n\t});\n\n\tapp.on(\"activate\", () => {\n\t\tif (BrowserWindow.getAllWindows().length === 0) {\n\t\t\tcreateWindow();\n\t\t}\n\t});\n});\n","module.exports = require(\"electron\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./index.ts\");\n"],"sourceRoot":""}